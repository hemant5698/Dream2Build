@model HeaderLinksModel
@using Nop.Core
@using Nop.Services.Configuration

@inject Nop.Core.IWebHelper webHelper
@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    int storeId = storeContext.CurrentStore.Id;
    bool compareProductsEnabled = settingService.GetSettingByKey("catalogsettings.compareproductsenabled", true, storeId, true);

    int privatMessageUnred = 0;
    Int32.TryParse(Model.UnreadPrivateMessages, out privatMessageUnred);
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
<div class="hedar-links-item help font-13 d-xs-none">
    <a href="tel:+8124512458">Helpline No: +91 81245 12458</a>
   
</div>
@if (Model.IsAuthenticated)
{
    <div class="hedar-links-item">
        <a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a>
    </div>
    @if (Model.AllowPrivateMessages)
    {
        <div class="hedar-links-item">
            <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                @if (privatMessageUnred > 0)
                {
                    <span class="inbox-unread">@privatMessageUnred</span>
                }
            </a>
        </div>
    }
    <div class="hedar-links-item">
        <a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a>
    </div>
}
else
{
    var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
        ? url.ToString()
        : webHelper.GetRawUrl(Context.Request);

        <div class="hedar-links-item">
            <a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a>
        </div>
        <div class="hedar-links-item">
            <a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a>
        </div>
        }
       
        @if (compareProductsEnabled)
        {
            <div class="hedar-links-item">
                <a href="@Url.RouteUrl("CompareProducts")" class="ico-compare">@T("Products.Compare.List")</a>
            </div>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
        @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
        {
            //new private message notification
            <script asp-location="Footer">
        $(document).ready(function () {
            displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
        });
            </script>
        }
